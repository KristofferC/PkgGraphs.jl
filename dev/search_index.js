var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"PkgGraph.PkgGraph\nPkgGraph.open\nPkgGraph.create\nPkgGraph.set_base_url","category":"page"},{"location":"usage/#PkgGraph.PkgGraph","page":"Usage","title":"PkgGraph.PkgGraph","text":"Visualize the dependency graph of a Julia package.\n\nUse PkgGraph.open to view the graph in the browser, or PkgGraph.create to generate an image locally.\n\n\n\n\n\n","category":"module"},{"location":"usage/#PkgGraph.open","page":"Usage","title":"PkgGraph.open","text":"open(pkgname)\n\nOpen the browser to an image of pkgname's dependency graph.\nThe given package must be installed in the currently active project.\n\nTo render the dependency graph using a local Graphviz dot installation (instead of an online Graphviz renderer), use create.\n\nFor more info, see url.\n\n\n\n\n\n","category":"function"},{"location":"usage/#PkgGraph.create","page":"Usage","title":"PkgGraph.create","text":"create(pkgname; dir = tempdir(), fmt = :png)\n\nRender the dependency graph of the given package as an image in dir, and open it with your default image viewer. Uses the external program 'dot' (graphviz.org), which must be available on PATH.\n\nfmt is an output file format supported by dot, such as svg or png.\n\n\n\n\n\n","category":"function"},{"location":"usage/#PkgGraph.set_base_url","page":"Usage","title":"PkgGraph.set_base_url","text":"set_base_url(new)\n\nSet the rendering website that will be used by open and url to the given new url.\n\nSee PkgGraph.base_urls for some options.\n\n\n\n\n\n","category":"function"},{"location":"background/#Background","page":"Background","title":"Background","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"Mermaid diagrams are more modern. It uses … for graph layout, which [ports some of the code of dot].","category":"page"},{"location":"#PkgGraph.jl","page":"Home","title":"PkgGraph.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"{include sections from ../readme.md …}","category":"page"},{"location":"internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/#Creating-a-dependency-graph","page":"Internals","title":"Creating a dependency graph","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"PkgGraph.depgraph","category":"page"},{"location":"internals/#PkgGraph.depgraph","page":"Internals","title":"PkgGraph.depgraph","text":"deps = depgraph(pkgname)\n\nBuild a graph of the dependencies of the given package, using the active project's Manifest file.\n\nThe returned deps object is a flat list of \"PkgA\" => \"PkgB\" dependency pairs.\n\n\n\n\n\n","category":"function"},{"location":"internals/#DOT-strings","page":"Internals","title":"DOT strings","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"PkgGraph.deps_as_DOT\nPkgGraph.to_DOT_str\nPkgGraph.style","category":"page"},{"location":"internals/#PkgGraph.deps_as_DOT","page":"Internals","title":"PkgGraph.deps_as_DOT","text":"deps_as_DOT(pkgname)\n\nCreate the dependency graph of pkgname and render it as a Graphviz DOT string.\n\nExample output (truncated), for \"Unitful\":\n\ndigraph {\n    node [fontname = \"sans-serif\"]\n    edge [arrowsize = 0.88]\n    Unitful -> ConstructionBase\n    ConstructionBase -> LinearAlgebra\n    LinearAlgebra -> Libdl\n    ⋮\n    Unitful -> Random\n    Random -> SHA\n    Random -> Serialization\n}\n\nFor more info, see depgraph and to_DOT_str.\n\n\n\n\n\n","category":"function"},{"location":"internals/#PkgGraph.to_DOT_str","page":"Internals","title":"PkgGraph.to_DOT_str","text":"to_DOT_str(edges; indent = 4)\n\nBuild a string that represents the given directed graph in the Graphviz DOT format.\n\nExample:\n\njulia> empty!(PkgGraph.style);\n\njulia> edges = [:A => :B, \"yes\" => \"no\"];\n\njulia> PkgGraph.to_DOT_str(edges, indent = 2) |> println\ndigraph {\n  A -> B\n  yes -> no\n}\n\n\n\n\n\n","category":"function"},{"location":"internals/#PkgGraph.style","page":"Internals","title":"PkgGraph.style","text":"style\n\nA list of strings used in constructing the \"digraph\" string in to_DOT_str. They are insterted as lines just before the graph edge lines.\n\nTo use the default Graphviz style, call:\n\nempty!(PkgGraph.style)\n\nSee Graphviz Attributes for more info on how dot graphs can be styled.\n\n\n\n\n\n","category":"constant"},{"location":"internals/#Online-rendering","page":"Internals","title":"Online rendering","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"PkgGraph.url","category":"page"},{"location":"internals/#PkgGraph.url","page":"Internals","title":"PkgGraph.url","text":"url(pkgname)\n\nCreate a URL at which the dependency graph of pkgname is rendered as an image, using an online Graphviz rendering service.\n\nHow it works\n\nThe dependency graph of pkgname is created locally, and converted to a string in the Graphviz DOT format (see deps_as_DOT). This string is URL-encoded, and appended to a partly-complete URL, which is by default the first entry in the PkgGraph.base_urls list. To use a different rendering website, use set_base_url.\n\n\n\n\n\n","category":"function"}]
}
