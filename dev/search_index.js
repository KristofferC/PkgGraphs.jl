var documenterSearchIndex = {"docs":
[{"location":"ref/end-user/","page":"End-user","title":"End-user","text":"CurrentModule = PkgGraph","category":"page"},{"location":"ref/end-user/#End-user","page":"End-user","title":"End-user","text":"","category":"section"},{"location":"ref/end-user/","page":"End-user","title":"End-user","text":"PkgGraph\nopen\ncreate\nrendering_websites","category":"page"},{"location":"ref/end-user/#PkgGraph.PkgGraph","page":"End-user","title":"PkgGraph.PkgGraph","text":"Visualize the dependency graph of a Julia package.\n\nUse PkgGraph.open to view the graph in the browser, or PkgGraph.create to generate an image locally.\n\nSee PkgGraph.Internals for more functions.\n\n\n\n\n\n","category":"module"},{"location":"ref/end-user/#PkgGraph.open","page":"End-user","title":"PkgGraph.open","text":"open(pkgname, website = first(rendering_websites))\n\nOpen the browser to an image of pkgname's dependency graph.\nThe given package must be installed in the currently active project.\n\nTo render the dependency graph using a local Graphviz dot installation (instead of an online Graphviz renderer), use create.\n\nSee also rendering_websites.\n\n\n\n\n\n","category":"function"},{"location":"ref/end-user/#PkgGraph.create","page":"End-user","title":"PkgGraph.create","text":"create(pkgname, dir = tempdir(); fmt = :png)\n\nRender the dependency graph of the given package as an image in dir, and open it with your default image viewer. Uses the external program 'dot' (see graphviz.org), which must be available on PATH.\n\nfmt is an output file format supported by dot, such as svg or png.\n\n\n\n\n\n","category":"function"},{"location":"ref/end-user/#PkgGraph.rendering_websites","page":"End-user","title":"PkgGraph.rendering_websites","text":"A list of base URLs of websites that can render Graphviz dot-formatted strings. Used by Internals.url.\n\nDefault:\n\nhttps://dreampuf.github.io/GraphvizOnline/#\nhttp://magjac.com/graphviz-visual-editor/?dot=\nhttps://edotor.net/?engine=dot#\n\n\n\n\n\n","category":"constant"},{"location":"ref/internal/","page":"Internal","title":"Internal","text":"CurrentModule = PkgGraph.Internals","category":"page"},{"location":"ref/internal/#Internal","page":"Internal","title":"Internal","text":"","category":"section"},{"location":"ref/internal/","page":"Internal","title":"Internal","text":"Internals","category":"page"},{"location":"ref/internal/#PkgGraph.Internals","page":"Internal","title":"PkgGraph.Internals","text":"Namespace for the non-end-user functions in PkgGraph.\n\nFor ease of experimentation, you can import these with\n\nusing PkgGraph.Internals\n\n(They are also imported in the main module, so they can be accessed as PkgGraph.depgraph, e.g).\n\n\n\n\n\n","category":"module"},{"location":"ref/internal/#Creating-a-dependency-graph","page":"Internal","title":"Creating a dependency graph","text":"","category":"section"},{"location":"ref/internal/","page":"Internal","title":"Internal","text":"depgraph\npackages_in_active_manifest","category":"page"},{"location":"ref/internal/#PkgGraph.Internals.depgraph","page":"Internal","title":"PkgGraph.Internals.depgraph","text":"depgraph(pkgname)\n\nBuild a directed graph of the dependencies of the given package, using the active project's Manifest file.\n\nThe returned deps object is a flat list of \"PkgA\" => \"PkgB\" dependency pairs.\n\nExample:\n\njulia> using PkgGraph.Internals\n\njulia> depgraph(:Test)\n8-element Vector{Any}:\n             \"Test\" => \"InteractiveUtils\"\n \"InteractiveUtils\" => \"Markdown\"\n         \"Markdown\" => \"Base64\"\n             \"Test\" => \"Logging\"\n             \"Test\" => \"Random\"\n           \"Random\" => \"SHA\"\n           \"Random\" => \"Serialization\"\n             \"Test\" => \"Serialization\"\n\n\n\n\n\n","category":"function"},{"location":"ref/internal/#PkgGraph.Internals.packages_in_active_manifest","page":"Internal","title":"PkgGraph.Internals.packages_in_active_manifest","text":"packages_in_active_manifest()\n\nParsed contents of the 'dependencies' part of the active project's Manifest.toml.\n\n\n\n\n\n","category":"function"},{"location":"ref/internal/#DOT-strings","page":"Internal","title":"DOT strings","text":"","category":"section"},{"location":"ref/internal/","page":"Internal","title":"Internal","text":"deps_as_dot\nto_dot_str\ndefault_style","category":"page"},{"location":"ref/internal/#PkgGraph.Internals.deps_as_dot","page":"Internal","title":"PkgGraph.Internals.deps_as_dot","text":"deps_as_dot(pkgname; kw...)\n\nCreate the dependency graph of pkgname and render it as a Graphviz DOT string.\n\nSee to_dot_str for keyword arguments.\n\nExample:\n\njulia> PkgGraph.deps_as_dot(:Test) |> println\ndigraph {\n    bgcolor = \"transparent\"\n    node [fontname = \"sans-serif\", style = \"filled\", fillcolor = \"white\"]\n    edge [arrowsize = 0.88]\n    Test -> InteractiveUtils\n    InteractiveUtils -> Markdown\n    Markdown -> Base64\n    Test -> Logging\n    Test -> Random\n    Random -> SHA\n    Random -> Serialization\n    Test -> Serialization\n}\n\n\n\n\n\n","category":"function"},{"location":"ref/internal/#PkgGraph.Internals.to_dot_str","page":"Internal","title":"PkgGraph.Internals.to_dot_str","text":"to_dot_str(edges; indent = 4, emptymsg = nothing, style = default_style)\n\nBuild a string that represents the given directed graph in the Graphviz DOT format ↗.\n\nIf there are no edges, a single node with emptymsg is created.\n\nstyle is a list of strings, inserted as lines in the output (just before the graph edge lines). To use Graphviz's default style, pass style = []. For more on how dot-graphs can be styled, see 'Graphviz Attributes' ↗\n\nExample:\n\njulia> using PkgGraph.Internals\n\njulia> edges = [:A => :B, \"yes\" => \"no\"];\n\njulia> to_dot_str(edges, indent=2, style=[]) |> println\ndigraph {\n  A -> B\n  yes -> no\n}\n\n\n\n\n\n","category":"function"},{"location":"ref/internal/#PkgGraph.Internals.default_style","page":"Internal","title":"PkgGraph.Internals.default_style","text":"The default style used by to_dot_str:\n\nbgcolor = \"transparent\"\nnode [fontname = \"sans-serif\", style = \"filled\", fillcolor = \"white\"]\nedge [arrowsize = 0.88]\n\n\n\n\n\n\n","category":"constant"},{"location":"ref/internal/#Online-rendering","page":"Internal","title":"Online rendering","text":"","category":"section"},{"location":"ref/internal/","page":"Internal","title":"Internal","text":"url","category":"page"},{"location":"ref/internal/#PkgGraph.Internals.url","page":"Internal","title":"PkgGraph.Internals.url","text":"url(pkgname, base_url = first(rendering_websites); kw...)\n\nCreate a URL at which the dependency graph of pkgname is rendered as an image, using an online Graphviz rendering service.\n\nKeyword arguments are passed on to deps_as_dot and to_dot_str.\n\nHow it works\n\nThe dependency graph of pkgname is created locally, and converted to a string in the Graphviz DOT format. This string is URL-encoded, and appended to a partly-complete base_url.\n\nExample:\n\njulia> base_url = PkgGraph.rendering_websites[2]\n\"http://magjac.com/graphviz-visual-editor/?dot=\"\n\njulia> PkgGraph.url(:TOML, base_url, style=[], indent=0)\n\"http://magjac.com/graphviz-visual-editor/?dot=digraph%20%7B%0ATOML%20-%3E%20Dates%0ADates%20-%3E%20Printf%0APrintf%20-%3E%20Unicode%0A%7D%0A\"\n\n\n\n\n\n","category":"function"},{"location":"background/#Background","page":"Background","title":"Background","text":"","category":"section"},{"location":"background/#Graph-layout","page":"Background","title":"Graph layout","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"'Mermaid diagrams' are something more newfangled than dot. They use the Dagre.js library for graph layout, which is based on dot (see its wiki, and codebase).","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"I find that dot's layout algorithm does a bit better than Mermaid / dagre's (even though Mermaid has prettier styling).","category":"page"},{"location":"","page":"Home","title":"Home","text":"{this is overwritten by a version of the ReadMe in make.jl}","category":"page"}]
}
