var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PkgGraph","category":"page"},{"location":"#PkgGraph","page":"Home","title":"PkgGraph","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PkgGraph.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PkgGraph]","category":"page"},{"location":"#PkgGraph.create_depgraph-Tuple{Any}","page":"Home","title":"PkgGraph.create_depgraph","text":"deps = create_depgraph(pkgname)\n\nBuild a graph of the dependencies of the given package, using the active project's Manifest file.\n\nThe returned deps object is a flat list of \"PkgA\" => \"PkgB\" dependency pairs.\n\n\n\n\n\n","category":"method"},{"location":"#PkgGraph.depgraph-Tuple{Any}","page":"Home","title":"PkgGraph.depgraph","text":"depgraph(pkgname)\n\nOpen the browser to an image of pkgname's dependency graph.\nThe given package must be installed in the currently active project.\n\nTo render the dependency graph using a local Graphviz dot installation (instead of an online Graphviz renderer), use depgraph_local.\n\nFor more info, see depgraph_url.\n\n\n\n\n\n","category":"method"},{"location":"#PkgGraph.depgraph_local","page":"Home","title":"PkgGraph.depgraph_local","text":"depgraph_local(pkgname, dir = tempdir(); fmt = :png)\n\nRender the dependency graph of the given package as an image in dir, and open it with your default image viewer. Uses the external program 'dot' (https://graphviz.org), which must be available on PATH.\n\nfmt is an output file format supported by dot, such as svg or png.\n\n\n\n\n\n","category":"function"},{"location":"#PkgGraph.depgraph_url-Tuple{Any}","page":"Home","title":"PkgGraph.depgraph_url","text":"depgraph_url(pkgname; renderer = default_rendering_url)\n\nCreate a URL at which the dependency graph of pkgname is rendered as an image, using an online Graphviz rendering service.\n\nHow it works\n\nThe dependency graph of pkgname is created locally, and converted to a string in the Graphviz DOT format (see deps_as_DOT). This string is URL-encoded, and appended to a partly-complete URL that is specified by the renderer keyword argument.\n\nThe default renderer is the first entry in the global rendering_urls list. To use a different rendering website, supply the renderer keyword argument, or set the mutable global default_rendering_url.\n\n\n\n\n\n","category":"method"},{"location":"#PkgGraph.deps_as_DOT-Tuple{Any}","page":"Home","title":"PkgGraph.deps_as_DOT","text":"deps_as_DOT(pkgname)\n\nCreate the dependency graph of pkgname and render it as a Graphviz DOT string.\n\nExample output (truncated), for \"Unitful\":\n\ndigraph {\n    Unitful -> ConstructionBase\n    ConstructionBase -> LinearAlgebra\n    LinearAlgebra -> Libdl\n    â‹®\n    Unitful -> Random\n    Random -> SHA\n    Random -> Serialization\n}\n\nFor more info, see create_depgraph and to_DOT_str.\n\n\n\n\n\n","category":"method"},{"location":"#PkgGraph.to_DOT_str-Tuple{Any}","page":"Home","title":"PkgGraph.to_DOT_str","text":"to_DOT_str(edges)\n\nBuild a string that represents the given directed graph in the Graphviz DOT format (https://graphviz.org/doc/info/lang.html).\n\nExample:\n\njulia> edges = [:A => :B, \"yes\" => \"no\"];\n\njulia> to_DOT_str(edges) |> println\ndigraph {\n    A -> B\n    yes -> no\n}\n\n\n\n\n\n","category":"method"}]
}
