var documenterSearchIndex = {"docs":
[{"location":"ref/end-user/","page":"End-user","title":"End-user","text":"CurrentModule = PkgGraph","category":"page"},{"location":"ref/end-user/#End-user","page":"End-user","title":"End-user","text":"","category":"section"},{"location":"ref/end-user/","page":"End-user","title":"End-user","text":"PkgGraph\nopen\ncreate\nrendering_websites","category":"page"},{"location":"ref/end-user/#PkgGraph.PkgGraph","page":"End-user","title":"PkgGraph.PkgGraph","text":"Visualize the dependency graph of a Julia package.\n\nUse PkgGraph.open to view the graph in the browser, or PkgGraph.create to generate an image locally.\n\n(Note that these functions are not exported).\n\nSee PkgGraph.Internals for more functions.\n\n\n\n\n\n","category":"module"},{"location":"ref/end-user/#PkgGraph.open","page":"End-user","title":"PkgGraph.open","text":"open(pkgname, website = first(rendering_websites))\n\nOpen the browser to an image of pkgname's dependency graph.\n\nThe given package must be installed in the currently active project.\n\nSee also rendering_websites and Internals.url.\n\n\n\n\n\n","category":"function"},{"location":"ref/end-user/#PkgGraph.create","page":"End-user","title":"PkgGraph.create","text":"create(pkgname, dir = tempdir(); fmt = :png)\n\nRender the dependency graph of the given package as an image in dir, and open it with your default image viewer. Uses the external program 'dot' (see graphviz.org), which must be available on PATH.\n\nfmt is an output file format supported by dot, such as svg or png.\n\nThe given package must be installed in the currently active project.\n\n\n\n\n\n","category":"function"},{"location":"ref/end-user/#PkgGraph.rendering_websites","page":"End-user","title":"PkgGraph.rendering_websites","text":"A list of websites that can render Graphviz dot-formatted strings. Used by Internals.url.\n\nNote that these are 'base URLs', to which url-encoded dot-strings can be directly appended.\n\nDefault contents:\n\nhttps://dreampuf.github.io/GraphvizOnline/#\nhttp://magjac.com/graphviz-visual-editor/?dot=\nhttps://edotor.net/?engine=dot#\n\n\n\n\n\n","category":"constant"},{"location":"ref/internal/","page":"Internal","title":"Internal","text":"CurrentModule = PkgGraph.Internals","category":"page"},{"location":"ref/internal/#Internal","page":"Internal","title":"Internal","text":"","category":"section"},{"location":"ref/internal/","page":"Internal","title":"Internal","text":"Internals","category":"page"},{"location":"ref/internal/#PkgGraph.Internals","page":"Internal","title":"PkgGraph.Internals","text":"Namespace for the non-end-user functions in PkgGraph.\n\nFor ease of experimentation, you can import these with\n\nusing PkgGraph.Internals\n\n(They are also imported in the main module, so they can be accessed as PkgGraph.depgraph, e.g).\n\n\n\n\n\n","category":"module"},{"location":"ref/internal/#Creating-a-dependency-graph","page":"Internal","title":"Creating a dependency graph","text":"","category":"section"},{"location":"ref/internal/","page":"Internal","title":"Internal","text":"depgraph\npackages_in_active_manifest","category":"page"},{"location":"ref/internal/#PkgGraph.Internals.depgraph","page":"Internal","title":"PkgGraph.Internals.depgraph","text":"depgraph(pkgname)\n\nBuild a directed graph of the dependencies of the given package, using the active project's Manifest file.\n\nThe returned deps object is a flat list of \"PkgA\" => \"PkgB\" dependency pairs.\n\nExample:\n\njulia> using PkgGraph.Internals\n\njulia> depgraph(:Test)\n8-element Vector{Pair{String, String}}:\n             \"Test\" => \"InteractiveUtils\"\n \"InteractiveUtils\" => \"Markdown\"\n         \"Markdown\" => \"Base64\"\n             \"Test\" => \"Logging\"\n             \"Test\" => \"Random\"\n           \"Random\" => \"SHA\"\n           \"Random\" => \"Serialization\"\n             \"Test\" => \"Serialization\"\n\n\n\n\n\n","category":"function"},{"location":"ref/internal/#PkgGraph.Internals.packages_in_active_manifest","page":"Internal","title":"PkgGraph.Internals.packages_in_active_manifest","text":"packages_in_active_manifest()\n\nParsed contents of the 'dependencies' part of the active project's Manifest.toml.\n\n\n\n\n\n","category":"function"},{"location":"ref/internal/#DOT-strings","page":"Internal","title":"DOT strings","text":"","category":"section"},{"location":"ref/internal/","page":"Internal","title":"Internal","text":"deps_as_dot\nto_dot_str\ndefault_style","category":"page"},{"location":"ref/internal/#PkgGraph.Internals.deps_as_dot","page":"Internal","title":"PkgGraph.Internals.deps_as_dot","text":"deps_as_dot(pkgname; emptymsg = \"($pkgname has no dependencies)\", kw...)\n\nCreate the dependency graph of pkgname and render it as a Graphviz DOT string.\n\nSee to_dot_str for keyword arguments.\n\nExample:\n\njulia> PkgGraph.deps_as_dot(:Test) |> println\ndigraph {\n    bgcolor = \"transparent\"\n    node [fontname = \"sans-serif\", style = \"filled\", fillcolor = \"white\"]\n    edge [arrowsize = 0.88]\n    Test -> InteractiveUtils\n    InteractiveUtils -> Markdown\n    Markdown -> Base64\n    Test -> Logging\n    Test -> Random\n    Random -> SHA\n    Random -> Serialization\n    Test -> Serialization\n}\n\n\n\n\n\n","category":"function"},{"location":"ref/internal/#PkgGraph.Internals.to_dot_str","page":"Internal","title":"PkgGraph.Internals.to_dot_str","text":"to_dot_str(edges; style = default_style, indent = 4, emptymsg = nothing)\n\nBuild a string that represents the given directed graph in the Graphviz DOT format â†—.\n\nIf there are no edges, a single node with emptymsg is created. If emptymsg is nothing (default), no nodes are created, and the image rendered from the DOT-string will be empty.\n\nstyle is a list of strings, inserted as lines in the output (just before the graph edge lines). To use Graphviz's default style, pass style = []. For more on how dot-graphs can be styled, see Styling Graphviz output.\n\nExample:\n\njulia> edges = [:A => :B, \"yes\" => \"no\"];\n\njulia> style = [\"node [color = \\\"red\\\"]\"];\n\njulia> using PkgGraph.Internals\n\njulia> to_dot_str(edges; style, indent = 2) |> println\ndigraph {\n  node [color = \"red\"]\n  A -> B\n  yes -> no\n}\n\njulia> to_dot_str([], style=[], emptymsg=\"(empty graph)\") |> println\ndigraph {\n    onlynode [label = \" (empty graph) \", shape = \"plaintext\"]\n}\n\nSee also default_style.\n\n\n\n\n\n","category":"function"},{"location":"ref/internal/#PkgGraph.Internals.default_style","page":"Internal","title":"PkgGraph.Internals.default_style","text":"The default style used by to_dot_str:\n\nbgcolor = \"transparent\"\nnode [fontname = \"sans-serif\", style = \"filled\", fillcolor = \"white\"]\nedge [arrowsize = 0.88]\n\n\n\n\n\n\n","category":"constant"},{"location":"ref/internal/#Online-rendering","page":"Internal","title":"Online rendering","text":"","category":"section"},{"location":"ref/internal/","page":"Internal","title":"Internal","text":"url","category":"page"},{"location":"ref/internal/#PkgGraph.Internals.url","page":"Internal","title":"PkgGraph.Internals.url","text":"url(pkgname, base_url = first(rendering_websites); kw...)\n\nCreate a URL at which the dependency graph of pkgname is rendered as an image, using an online Graphviz rendering service.\n\nKeyword arguments are passed on to deps_as_dot / to_dot_str.\n\nHow it works\n\nThe dependency graph of pkgname is created locally, and converted to a string in the Graphviz DOT format. This string is URL-encoded, and appended to a partly-complete base_url (see rendering_websites).\n\nExample:\n\njulia> base_url = PkgGraph.rendering_websites[2]\n\"http://magjac.com/graphviz-visual-editor/?dot=\"\n\njulia> PkgGraph.url(:TOML, base_url, style=[], indent=0)\n\"http://magjac.com/graphviz-visual-editor/?dot=digraph%20%7B%0ATOML%20-%3E%20Dates%0ADates%20-%3E%20Printf%0APrintf%20-%3E%20Unicode%0A%7D%0A\"\n\n\n\n\n\n","category":"function"},{"location":"background/#Background","page":"Background","title":"Background","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"Explanation of choices and tradeoffs, discussion of alternatives, and other PkgGraph-related trivia.","category":"page"},{"location":"background/#Local-vs-'online'-rendering","page":"Background","title":"Local vs 'online' rendering","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"('online' is in quotes, because these websites (PkgGraph.rendering_websites) use wasm-compiled versions of graphviz, i.e. in the end graphviz does run on your local computer. Though, alas, you do need an active internet connection to access them).","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The advantage of the web-interfaces is that they provide a nice interactive editor, for if you want to tweak your output.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Magnus Jacobsson's magjac.com/graphviz-visual-editor is especially good for this, as it provides a GUI interface for adding new nodes and changing styles.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(It is also the renderer linked from the official graphviz.org website, and its repository is receiving active updates at the time of writing).","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"You can use that website by providing the following as second argument to PkgGraph.open:","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"julia> website = PkgGraph.rendering_websites[2]\n\"http://magjac.com/graphviz-visual-editor/?dot=\"\n\njulia> # PkgGraph.open(:Test, website)","category":"page"},{"location":"background/#Styling-Graphviz-output","page":"Background","title":"Styling Graphviz output","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"The best place to find how to do something with the Graphviz options is probably graphviz.org/gallery. Every example comes with the DOT source that produced it.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"You could also take a look at the Attributes documentation.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Note that it is often hard or not feasible to achieve a particular graphic effect with Graphviz (see the quote by one of Graphviz's authors in Graphviz today below). The better option, if you want a particular style, is probably to import the generated SVG image into a design program, and then edit that manually; or even to re-create the graph from scratch.","category":"page"},{"location":"background/#Related-packages","page":"Background","title":"Related packages","text":"","category":"section"},{"location":"background/#[PkgDependency.jl](https://github.com/peng1999/PkgDependency.jl)","page":"Background","title":"PkgDependency.jl","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"Nice and actively maintained package that does a very similar thing to PkgGraph, and has no non-Julia dependencies. Prints package dependencies as a tree in the REPL. Because package dependencies are a DAG and not a tree, there are repeated names in the printout (they are marked with (*)).","category":"page"},{"location":"background/#[PkgDeps.jl](https://github.com/JuliaEcosystem/PkgDeps.jl)","page":"Background","title":"PkgDeps.jl","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"Provides a very useful users(pkg) function, to see downstream dependents of a package (instead of upstream like here). Also has dependencies(pkg) and direct_dependencies(pkg) functions.","category":"page"},{"location":"background/#[Graphviz.jl](https://github.com/JuliaGraphs/GraphViz.jl)","page":"Background","title":"Graphviz.jl","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"Comes with Graphviz_jll from JuliaBinaryWrappers, providing Julia access to graphviz's C API. Not a lot of documentation.","category":"page"},{"location":"background/#Alternatives-to-Graphviz","page":"Background","title":"Alternatives to Graphviz","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"'Mermaid diagrams' are something more newfangled than Graphviz.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Mermaid uses the Dagre.js library for graph layout. Dagre.js is in part based on dot. From their wiki:","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"The general skeleton for Dagre comes from Gansner, et al., \"A Technique for Drawing Directed Graphs\",  which gives both an excellent high level overview of the phases involved in layered drawing as well as diving into the details and problems of each of the phases. Besides the basic skeleton, we specifically used the technique described in the paper to produce an acyclic graph,  and we use the network simplex algorithm for ranking.  If there is one paper to start with when learning about layered graph drawing, this is it!","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"(See also mentions of the paper in Dagre's codebase).","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Mermaid has prettier default styling than Graphviz.\nBut, I find that dot does a bit better at graph layout than Mermaid / Dagre.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"By choosing Graphviz over Mermaid, we trade-off some styling and style-abilityÂ¹  for better default DAG layouts.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Â¹ The default Graphviz style is not awesome, and many effects are infeasible to achieve.   (See also the critical note in Styling Graphviz output above).","category":"page"},{"location":"background/#Graphviz-today","page":"Background","title":"Graphviz today","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"My impressions from browsing through the Graphviz Discourse forum and their GitLab:","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"Two of the original creators (Emden R. Gansner and Stephen C. North) are still engaged with the project (though they are not writing much code anymore)\nThere are new maintainers, actively making edits to the codebase at the time of writing.\nThe codebase â€“ though working fantastically still in 2022 â€“ seems a bit unwieldy to add new features to. See the following quote.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"From a 2020 Hacker News comment by one of Graphviz's creators (edited):","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"We're reluctant to be exposed to too much anger about misfeatures in 20 year old code that was basically a prototype that escaped from the lab, [..]We've gotten a lot of help lately from Magnus Jacobsson, Matthew Fernandez and Mark Hansen on cleaning up the website and the code base, even some persistent bugs we could never find ourselves.Improvements that would benefit the community the most?better default styles that don't look like troff from 1985\nmore expressive graph language with classes or templates\nbetter documentation to help people find useful tools or just know what they should be looking for\nit would be a big effort, but move the core algorithms to a framework that supports interaction with layout generation","category":"page"},{"location":"background/#The-dot-algorithm-in-Julia?","page":"Background","title":"The dot algorithm in Julia?","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"A fun project would be to translate the four-step DAG layout algorithm, described very well in the original paper, to Julia. (The code would probably be shorter, and maybe more maintainable,  than the current C implementation).","category":"page"},{"location":"background/#Gansner1993","page":"Background","title":"The original paper on dot's algorithm","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"E. R. Gansner, E. Koutsofios, S. C. North and K.-P. Vo, \"A technique for drawing directed graphs,\" IEEE Transactions on Software Engineering, Mar. 1993. doi: 10.1109/32.221135","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"An open version of this paper is available via the official Graphviz website:","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"graphviz.org/documentation/TSE93.pdf","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"That version is alas not typeset as nicely as the IEEE-version.\nFor those without institutional access, please see the following ","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"copy of the IEEE-typeset version","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"For more publications on Graphviz, see graphviz.org/theory.","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"","category":"page"},{"location":"background/","page":"Background","title":"Background","text":"For more Graphviz-related resources in general, see the official website and forums, and this curated list: 'Awesome GraphViz'.","category":"page"},{"location":"","page":"Home","title":"Home","text":"{this is overwritten by a version of the ReadMe in make.jl}","category":"page"}]
}
